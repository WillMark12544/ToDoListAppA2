@model ToDoListAppA2.Models.ToDoList

@{
    ViewData["Title"] = "Share";
}

<h1>Share To-Do List</h1>

<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Share">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="mb-3">
                <label asp-for="Title" class="form-label"></label>
                <input asp-for="Title" class="form-control" disabled/>
            </div>
            <div class="mb-3">
                <label for="email" class="form-label">Enter User Email Address</label>
                <input type="email" id="email" name="email" class="form-control"/>
                <!--
                    The ToDoList Model has no email property so email validation errors
                    are handled manually here using ViewData.ModelState.
                    You can not use asp-validation-for like in previous views as the model 
                    does not have the corresponding property
                -->
                @if (ViewData.ModelState["Email"] != null && ViewData.ModelState["Email"].Errors.Count > 0)
                {
                    <span class="text-danger">@ViewData.ModelState["Email"].Errors[0].ErrorMessage</span>
                }
            </div>
            <input type="hidden" asp-for="Id" />

            <div class="mb-3">
                <input type="submit" value="Share" class="btn btn-primary" />
                <a asp-action="Index" class="btn btn-secondary">Back to List</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
